/*
 * generated by Xtext
 */
package nl.marsrover.generator

import nl.marsrover.dSL.Rule
import nl.marsrover.dSL.Specification
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import nl.marsrover.dSL.Action
import nl.marsrover.dSL.Direction
import nl.marsrover.dSL.Condition

class DSLGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val spec = getSpecification(resource)
		val name = resource.URI.lastSegment().split("\\.", 2).get(0)
		val path = "generated/" + name + "/"
		
		fsa.generateFile(path + name + "Robot.java", generateMainClass(spec, name, resource))
		for(var i = 0; i < spec.rules.length; i++) {
			val ruleName = name + "Rule" + i
			fsa.generateFile(path + ruleName + ".java", generateRule(spec.rules.get(i), ruleName, name))
		}
	}
	
	def String toCamelCase(String line) {
		val builder = new StringBuilder();
		var nextUpper = true;
		for (char c : line.toCharArray()) {
			if (Character.isAlphabetic(c)) {
				if(nextUpper) {
					builder.append(Character.toUpperCase(c));
				}
				else {
					builder.append(Character.toLowerCase(c));
				}
				nextUpper = false;
			} else if (c == ',') {
				builder.append("Then");
				nextUpper = false;
			} else if (Character.isWhitespace(c)) {
				nextUpper = true;
			}
		}
		return builder.toString();
	}
	
	
	def generateRule(Rule rule, String ruleName, String specName) '''
import java.io.IOException;
import lejos.robotics.subsumption.Behavior;
import lejos.nxt.Button;


public class «ruleName» implements Behavior
{
	private boolean suppressed = false;
	private final «specName»Robot robot;
	private static final int TRESHOLD = 80;
	
	public «ruleName»(«specName»Robot robot)
	{
		this.robot = robot;
	}

	private boolean takesControl;
	@Override
	public boolean takeControl()
	{
		this.takesControl = 
			(«rule.conditionList.conditions.join(" && ", [condition | generateCondition(condition)])»);
		return this.takesControl;
	}
	
	«IF rule.conditionList.conditions.exists[condition | condition.atLake]»
	private int color;
	private boolean atLake() {
		try {
			this.color = robot.slave.readColor();
			return this.color > 1;
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		return false;
	}
	«ENDIF»
	
	«IF rule.conditionList.conditions.exists[condition | condition.isNotProbed]»
	private boolean isProbed() {
		return robot.probed.containsKey(this.color);
	}
	«ENDIF»
	
	private boolean obstacleIsRight = false;
	«IF rule.conditionList.conditions.exists[condition | condition.obstacle]»
	private boolean obstacle(int distance) {
		boolean obstacleLeftDetected = false;
		boolean obstacleRightDetected = false;
		if(distance <= 15) {
			obstacleRightDetected = robot.touchSensorRight.isPressed()  || 
				robot.lightSensorRight.getLightValue() > TRESHOLD;
			obstacleLeftDetected = robot.touchSensorLeft.isPressed()  || 
				robot.lightSensorLeft.getLightValue() > TRESHOLD;
		}
		
		try {
			obstacleRightDetected = obstacleRightDetected || robot.slave.readUltrasonic() < distance;
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		if(obstacleLeftDetected || obstacleRightDetected) {
			this.obstacleIsRight = obstacleRightDetected;
			return true;
		}
		return false;
	}
	«ENDIF»

	@Override
	public void action()
	{
		System.out.println("Rule: «ruleName»");
		this.suppressed = false;
		
		«FOR action : rule.actionList.actions»
		«generateAction(action)»
		«ENDFOR»
		
		this.takesControl = false;
	}

	@Override
	public void suppress()
	{
		this.suppressed = true;
	}

}
	'''
	
	def generateCondition(Condition condition) '''
		«IF condition.not»
			!(«generateCondition(condition.condition)»)
		«ELSEIF condition.allLakes»
			robot.toProbe.size() == robot.probed.size()
		«ELSEIF condition.obstacle»
			obstacle(«condition.distance.value»)
		«ELSEIF condition.atLake»
			atLake()
		«ELSEIF condition.isNotProbed»
			!isProbed()
		«ENDIF»
	'''
	
	def generateAction(Action action) '''
		«IF action.showLakes»
			for (Integer lake : robot.probed.keyList()) {
				System.out.println(lake + " was " + robot.probed.get(lake));
			}
			Button.waitForAnyPress();
		«ELSEIF action.driveDirection»
		«IF action.direction == Direction.FORWARD»
			robot.pilot.forward();
		«ELSE»
			robot.pilot.backward();
		«ENDIF»
		
		«ELSEIF action.driveDistance»
			robot.pilot.travel(«IF action.direction == Direction.BACKWARD»-«ENDIF»«action.distance.value», true);
		«ELSEIF action.steer»
		«IF action.angle.away»
			if(this.obstacleIsRight) {
				robot.pilot.rotate(90, true);
			}
			else {
				robot.pilot.rotate(-90, true);
			}
		«ELSE»
			robot.pilot.rotate(«IF action.angle.sign»-«ENDIF»«action.angle.value», true);
		«ENDIF»
		«ELSEIF action.probeLake»
			try {
				robot.probed.put(this.color, robot.slave.probeLake());
			}
			catch (IOException e) {
				e.printStackTrace();
			}
		«ELSEIF action.blinkLights»
			robot.slave.lampOn();
		«ENDIF»
		
		
		while (!this.suppressed && this.robot.pilot.isMoving()) {
			Thread.yield();
		}
		this.robot.pilot.stop();
	'''
	
	def generateMainClass(Specification spec, String name, Resource resource) '''
import lejos.robotics.subsumption.Behavior;

public class «name»Robot extends BaseRobot {
	
	public static void main(String[] args) {
		new «name»Robot().run();
	}
	
	public «name»Robot() {
		super();
	}

	@Override
	protected Behavior[] getBehaviors() {
		return new Behavior[] {
			«FOR i : 0..spec.rules.length - 1»
				new «name»Rule«i»(this),
			«ENDFOR»
		};
	}
}
	'''
	
	def getSpecification(Resource resource) {
		return resource.allContents.head as Specification
	}
	
}
