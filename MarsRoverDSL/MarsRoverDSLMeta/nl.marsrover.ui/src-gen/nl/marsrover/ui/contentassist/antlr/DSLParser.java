/*
* generated by Xtext
*/
package nl.marsrover.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import nl.marsrover.services.DSLGrammarAccess;

public class DSLParser extends AbstractContentAssistParser {
	
	@Inject
	private DSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected nl.marsrover.ui.contentassist.antlr.internal.InternalDSLParser createParser() {
		nl.marsrover.ui.contentassist.antlr.internal.InternalDSLParser result = new nl.marsrover.ui.contentassist.antlr.internal.InternalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getAngleAccess().getAlternatives(), "rule__Angle__Alternatives");
					put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getConditionListAccess().getGroup(), "rule__ConditionList__Group__0");
					put(grammarAccess.getConditionListAccess().getGroup_1(), "rule__ConditionList__Group_1__0");
					put(grammarAccess.getConditionAccess().getGroup_0(), "rule__Condition__Group_0__0");
					put(grammarAccess.getConditionAccess().getGroup_2(), "rule__Condition__Group_2__0");
					put(grammarAccess.getActionListAccess().getGroup(), "rule__ActionList__Group__0");
					put(grammarAccess.getActionListAccess().getGroup_1(), "rule__ActionList__Group_1__0");
					put(grammarAccess.getActionAccess().getGroup_1(), "rule__Action__Group_1__0");
					put(grammarAccess.getActionAccess().getGroup_2(), "rule__Action__Group_2__0");
					put(grammarAccess.getActionAccess().getGroup_3(), "rule__Action__Group_3__0");
					put(grammarAccess.getDistanceAccess().getGroup(), "rule__Distance__Group__0");
					put(grammarAccess.getAngleAccess().getGroup_0(), "rule__Angle__Group_0__0");
					put(grammarAccess.getSpecificationAccess().getRuleAssignment(), "rule__Specification__RuleAssignment");
					put(grammarAccess.getRuleAccess().getConditionListAssignment_1(), "rule__Rule__ConditionListAssignment_1");
					put(grammarAccess.getRuleAccess().getActionListAssignment_3(), "rule__Rule__ActionListAssignment_3");
					put(grammarAccess.getConditionListAccess().getConditionsAssignment_0(), "rule__ConditionList__ConditionsAssignment_0");
					put(grammarAccess.getConditionListAccess().getConditionsAssignment_1_1(), "rule__ConditionList__ConditionsAssignment_1_1");
					put(grammarAccess.getConditionAccess().getNotAssignment_0_0(), "rule__Condition__NotAssignment_0_0");
					put(grammarAccess.getConditionAccess().getConditionAssignment_0_1(), "rule__Condition__ConditionAssignment_0_1");
					put(grammarAccess.getConditionAccess().getAllLakesAssignment_1(), "rule__Condition__AllLakesAssignment_1");
					put(grammarAccess.getConditionAccess().getCollisionAssignment_2_0(), "rule__Condition__CollisionAssignment_2_0");
					put(grammarAccess.getConditionAccess().getDistanceAssignment_2_1(), "rule__Condition__DistanceAssignment_2_1");
					put(grammarAccess.getConditionAccess().getAtLakeAssignment_3(), "rule__Condition__AtLakeAssignment_3");
					put(grammarAccess.getConditionAccess().getIsProbedAssignment_4(), "rule__Condition__IsProbedAssignment_4");
					put(grammarAccess.getActionListAccess().getActionsAssignment_0(), "rule__ActionList__ActionsAssignment_0");
					put(grammarAccess.getActionListAccess().getActionsAssignment_1_1(), "rule__ActionList__ActionsAssignment_1_1");
					put(grammarAccess.getActionAccess().getShowLakesAssignment_0(), "rule__Action__ShowLakesAssignment_0");
					put(grammarAccess.getActionAccess().getDriveDirectionAssignment_1_0(), "rule__Action__DriveDirectionAssignment_1_0");
					put(grammarAccess.getActionAccess().getDirectionAssignment_1_1(), "rule__Action__DirectionAssignment_1_1");
					put(grammarAccess.getActionAccess().getDriveDistanceAssignment_2_0(), "rule__Action__DriveDistanceAssignment_2_0");
					put(grammarAccess.getActionAccess().getDirectionAssignment_2_1(), "rule__Action__DirectionAssignment_2_1");
					put(grammarAccess.getActionAccess().getDistanceAssignment_2_2(), "rule__Action__DistanceAssignment_2_2");
					put(grammarAccess.getActionAccess().getSteerAssignment_3_0(), "rule__Action__SteerAssignment_3_0");
					put(grammarAccess.getActionAccess().getAngleAssignment_3_1(), "rule__Action__AngleAssignment_3_1");
					put(grammarAccess.getActionAccess().getProbeLakeAssignment_4(), "rule__Action__ProbeLakeAssignment_4");
					put(grammarAccess.getActionAccess().getBlinkLightsAssignment_5(), "rule__Action__BlinkLightsAssignment_5");
					put(grammarAccess.getDistanceAccess().getValueAssignment_0(), "rule__Distance__ValueAssignment_0");
					put(grammarAccess.getAngleAccess().getValueAssignment_0_0(), "rule__Angle__ValueAssignment_0_0");
					put(grammarAccess.getAngleAccess().getAwayAssignment_1(), "rule__Angle__AwayAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			nl.marsrover.ui.contentassist.antlr.internal.InternalDSLParser typedParser = (nl.marsrover.ui.contentassist.antlr.internal.InternalDSLParser) parser;
			typedParser.entryRuleSpecification();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
