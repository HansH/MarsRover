/*
* generated by Xtext
*/
grammar InternalDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package nl.marsrover.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nl.marsrover.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import nl.marsrover.services.DSLGrammarAccess;

}

@parser::members {
 
 	private DSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSpecification
entryRuleSpecification 
:
{ before(grammarAccess.getSpecificationRule()); }
	 ruleSpecification
{ after(grammarAccess.getSpecificationRule()); } 
	 EOF 
;

// Rule Specification
ruleSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSpecificationAccess().getRuleAssignment()); }
(rule__Specification__RuleAssignment)*
{ after(grammarAccess.getSpecificationAccess().getRuleAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionList
entryRuleConditionList 
:
{ before(grammarAccess.getConditionListRule()); }
	 ruleConditionList
{ after(grammarAccess.getConditionListRule()); } 
	 EOF 
;

// Rule ConditionList
ruleConditionList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionListAccess().getGroup()); }
(rule__ConditionList__Group__0)
{ after(grammarAccess.getConditionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getAlternatives()); }
(rule__Condition__Alternatives)
{ after(grammarAccess.getConditionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActionList
entryRuleActionList 
:
{ before(grammarAccess.getActionListRule()); }
	 ruleActionList
{ after(grammarAccess.getActionListRule()); } 
	 EOF 
;

// Rule ActionList
ruleActionList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionListAccess().getGroup()); }
(rule__ActionList__Group__0)
{ after(grammarAccess.getActionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getAlternatives()); }
(rule__Action__Alternatives)
{ after(grammarAccess.getActionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDistance
entryRuleDistance 
:
{ before(grammarAccess.getDistanceRule()); }
	 ruleDistance
{ after(grammarAccess.getDistanceRule()); } 
	 EOF 
;

// Rule Distance
ruleDistance
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDistanceAccess().getGroup()); }
(rule__Distance__Group__0)
{ after(grammarAccess.getDistanceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAngle
entryRuleAngle 
:
{ before(grammarAccess.getAngleRule()); }
	 ruleAngle
{ after(grammarAccess.getAngleRule()); } 
	 EOF 
;

// Rule Angle
ruleAngle
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAngleAccess().getAlternatives()); }
(rule__Angle__Alternatives)
{ after(grammarAccess.getAngleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Direction
ruleDirection
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectionAccess().getAlternatives()); }
(rule__Direction__Alternatives)
{ after(grammarAccess.getDirectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Condition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getGroup_0()); }
(rule__Condition__Group_0__0)
{ after(grammarAccess.getConditionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getAllLakesAssignment_1()); }
(rule__Condition__AllLakesAssignment_1)
{ after(grammarAccess.getConditionAccess().getAllLakesAssignment_1()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getGroup_2()); }
(rule__Condition__Group_2__0)
{ after(grammarAccess.getConditionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getAtLakeAssignment_3()); }
(rule__Condition__AtLakeAssignment_3)
{ after(grammarAccess.getConditionAccess().getAtLakeAssignment_3()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getIsProbedAssignment_4()); }
(rule__Condition__IsProbedAssignment_4)
{ after(grammarAccess.getConditionAccess().getIsProbedAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getShowLakesAssignment_0()); }
(rule__Action__ShowLakesAssignment_0)
{ after(grammarAccess.getActionAccess().getShowLakesAssignment_0()); }
)

    |(
{ before(grammarAccess.getActionAccess().getGroup_1()); }
(rule__Action__Group_1__0)
{ after(grammarAccess.getActionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getActionAccess().getGroup_2()); }
(rule__Action__Group_2__0)
{ after(grammarAccess.getActionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getActionAccess().getGroup_3()); }
(rule__Action__Group_3__0)
{ after(grammarAccess.getActionAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getActionAccess().getProbeLakeAssignment_4()); }
(rule__Action__ProbeLakeAssignment_4)
{ after(grammarAccess.getActionAccess().getProbeLakeAssignment_4()); }
)

    |(
{ before(grammarAccess.getActionAccess().getBlinkLightsAssignment_5()); }
(rule__Action__BlinkLightsAssignment_5)
{ after(grammarAccess.getActionAccess().getBlinkLightsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Angle__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAngleAccess().getGroup_0()); }
(rule__Angle__Group_0__0)
{ after(grammarAccess.getAngleAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAngleAccess().getAwayAssignment_1()); }
(rule__Angle__AwayAssignment_1)
{ after(grammarAccess.getAngleAccess().getAwayAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Direction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectionAccess().getFORWARDEnumLiteralDeclaration_0()); }
(	'forward' 
)
{ after(grammarAccess.getDirectionAccess().getFORWARDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDirectionAccess().getBACKWARDEnumLiteralDeclaration_1()); }
(	'backward' 
)
{ after(grammarAccess.getDirectionAccess().getBACKWARDEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getRuleAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getConditionListAssignment_1()); }
(rule__Rule__ConditionListAssignment_1)
{ after(grammarAccess.getRuleAccess().getConditionListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getRuleAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getActionListAssignment_3()); }
(rule__Rule__ActionListAssignment_3)
{ after(grammarAccess.getRuleAccess().getActionListAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ConditionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionList__Group__0__Impl
	rule__ConditionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionListAccess().getConditionsAssignment_0()); }
(rule__ConditionList__ConditionsAssignment_0)
{ after(grammarAccess.getConditionListAccess().getConditionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionListAccess().getGroup_1()); }
(rule__ConditionList__Group_1__0)*
{ after(grammarAccess.getConditionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionList__Group_1__0__Impl
	rule__ConditionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionListAccess().getAndKeyword_1_0()); }

	'and' 

{ after(grammarAccess.getConditionListAccess().getAndKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionListAccess().getConditionsAssignment_1_1()); }
(rule__ConditionList__ConditionsAssignment_1_1)
{ after(grammarAccess.getConditionListAccess().getConditionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Condition__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_0__0__Impl
	rule__Condition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getNotAssignment_0_0()); }
(rule__Condition__NotAssignment_0_0)
{ after(grammarAccess.getConditionAccess().getNotAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getConditionAssignment_0_1()); }
(rule__Condition__ConditionAssignment_0_1)
{ after(grammarAccess.getConditionAccess().getConditionAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Condition__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_2__0__Impl
	rule__Condition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getCollisionAssignment_2_0()); }
(rule__Condition__CollisionAssignment_2_0)
{ after(grammarAccess.getConditionAccess().getCollisionAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getDistanceAssignment_2_1()); }
(rule__Condition__DistanceAssignment_2_1)
{ after(grammarAccess.getConditionAccess().getDistanceAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ActionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionList__Group__0__Impl
	rule__ActionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getActionsAssignment_0()); }
(rule__ActionList__ActionsAssignment_0)
{ after(grammarAccess.getActionListAccess().getActionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getGroup_1()); }
(rule__ActionList__Group_1__0)*
{ after(grammarAccess.getActionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ActionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionList__Group_1__0__Impl
	rule__ActionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getActionListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getActionsAssignment_1_1()); }
(rule__ActionList__ActionsAssignment_1_1)
{ after(grammarAccess.getActionListAccess().getActionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Action__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group_1__0__Impl
	rule__Action__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDriveDirectionAssignment_1_0()); }
(rule__Action__DriveDirectionAssignment_1_0)
{ after(grammarAccess.getActionAccess().getDriveDirectionAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDirectionAssignment_1_1()); }
(rule__Action__DirectionAssignment_1_1)
{ after(grammarAccess.getActionAccess().getDirectionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Action__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group_2__0__Impl
	rule__Action__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDriveDistanceAssignment_2_0()); }
(rule__Action__DriveDistanceAssignment_2_0)
{ after(grammarAccess.getActionAccess().getDriveDistanceAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group_2__1__Impl
	rule__Action__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDirectionAssignment_2_1()); }
(rule__Action__DirectionAssignment_2_1)
{ after(grammarAccess.getActionAccess().getDirectionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDistanceAssignment_2_2()); }
(rule__Action__DistanceAssignment_2_2)
{ after(grammarAccess.getActionAccess().getDistanceAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Action__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group_3__0__Impl
	rule__Action__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getSteerAssignment_3_0()); }
(rule__Action__SteerAssignment_3_0)
{ after(grammarAccess.getActionAccess().getSteerAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getAngleAssignment_3_1()); }
(rule__Action__AngleAssignment_3_1)
{ after(grammarAccess.getActionAccess().getAngleAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Distance__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Distance__Group__0__Impl
	rule__Distance__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Distance__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDistanceAccess().getValueAssignment_0()); }
(rule__Distance__ValueAssignment_0)
{ after(grammarAccess.getDistanceAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Distance__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Distance__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Distance__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDistanceAccess().getCmKeyword_1()); }

	'cm' 

{ after(grammarAccess.getDistanceAccess().getCmKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Angle__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Angle__Group_0__0__Impl
	rule__Angle__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Angle__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAngleAccess().getValueAssignment_0_0()); }
(rule__Angle__ValueAssignment_0_0)
{ after(grammarAccess.getAngleAccess().getValueAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Angle__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Angle__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Angle__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAngleAccess().getDegreesKeyword_0_1()); }

	'degrees' 

{ after(grammarAccess.getAngleAccess().getDegreesKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Specification__RuleAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecificationAccess().getRuleRuleParserRuleCall_0()); }
	ruleRule{ after(grammarAccess.getSpecificationAccess().getRuleRuleParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getConditionListConditionListParserRuleCall_1_0()); }
	ruleConditionList{ after(grammarAccess.getRuleAccess().getConditionListConditionListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ActionListAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getActionListActionListParserRuleCall_3_0()); }
	ruleActionList{ after(grammarAccess.getRuleAccess().getActionListActionListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionList__ConditionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionListAccess().getConditionsConditionParserRuleCall_0_0()); }
	ruleCondition{ after(grammarAccess.getConditionListAccess().getConditionsConditionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionList__ConditionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionListAccess().getConditionsConditionParserRuleCall_1_1_0()); }
	ruleCondition{ after(grammarAccess.getConditionListAccess().getConditionsConditionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__NotAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getNotNotKeyword_0_0_0()); }
(
{ before(grammarAccess.getConditionAccess().getNotNotKeyword_0_0_0()); }

	'not' 

{ after(grammarAccess.getConditionAccess().getNotNotKeyword_0_0_0()); }
)

{ after(grammarAccess.getConditionAccess().getNotNotKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getConditionConditionParserRuleCall_0_1_0()); }
	ruleCondition{ after(grammarAccess.getConditionAccess().getConditionConditionParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__AllLakesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getAllLakesAllLakesAreFoundKeyword_1_0()); }
(
{ before(grammarAccess.getConditionAccess().getAllLakesAllLakesAreFoundKeyword_1_0()); }

	'all lakes are found' 

{ after(grammarAccess.getConditionAccess().getAllLakesAllLakesAreFoundKeyword_1_0()); }
)

{ after(grammarAccess.getConditionAccess().getAllLakesAllLakesAreFoundKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__CollisionAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getCollisionCollisionInLessThanKeyword_2_0_0()); }
(
{ before(grammarAccess.getConditionAccess().getCollisionCollisionInLessThanKeyword_2_0_0()); }

	'collision in less than' 

{ after(grammarAccess.getConditionAccess().getCollisionCollisionInLessThanKeyword_2_0_0()); }
)

{ after(grammarAccess.getConditionAccess().getCollisionCollisionInLessThanKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__DistanceAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getDistanceDistanceParserRuleCall_2_1_0()); }
	ruleDistance{ after(grammarAccess.getConditionAccess().getDistanceDistanceParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__AtLakeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getAtLakeAtLakeKeyword_3_0()); }
(
{ before(grammarAccess.getConditionAccess().getAtLakeAtLakeKeyword_3_0()); }

	'at lake' 

{ after(grammarAccess.getConditionAccess().getAtLakeAtLakeKeyword_3_0()); }
)

{ after(grammarAccess.getConditionAccess().getAtLakeAtLakeKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__IsProbedAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getIsProbedLakeHasNotBeenProbedKeyword_4_0()); }
(
{ before(grammarAccess.getConditionAccess().getIsProbedLakeHasNotBeenProbedKeyword_4_0()); }

	'lake has not been probed' 

{ after(grammarAccess.getConditionAccess().getIsProbedLakeHasNotBeenProbedKeyword_4_0()); }
)

{ after(grammarAccess.getConditionAccess().getIsProbedLakeHasNotBeenProbedKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__ActionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getActionsActionParserRuleCall_0_0()); }
	ruleAction{ after(grammarAccess.getActionListAccess().getActionsActionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__ActionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getActionsActionParserRuleCall_1_1_0()); }
	ruleAction{ after(grammarAccess.getActionListAccess().getActionsActionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ShowLakesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getShowLakesShowLakesKeyword_0_0()); }
(
{ before(grammarAccess.getActionAccess().getShowLakesShowLakesKeyword_0_0()); }

	'show lakes' 

{ after(grammarAccess.getActionAccess().getShowLakesShowLakesKeyword_0_0()); }
)

{ after(grammarAccess.getActionAccess().getShowLakesShowLakesKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__DriveDirectionAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDriveDirectionDriveKeyword_1_0_0()); }
(
{ before(grammarAccess.getActionAccess().getDriveDirectionDriveKeyword_1_0_0()); }

	'drive' 

{ after(grammarAccess.getActionAccess().getDriveDirectionDriveKeyword_1_0_0()); }
)

{ after(grammarAccess.getActionAccess().getDriveDirectionDriveKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__DirectionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDirectionDirectionEnumRuleCall_1_1_0()); }
	ruleDirection{ after(grammarAccess.getActionAccess().getDirectionDirectionEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__DriveDistanceAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDriveDistanceDriveKeyword_2_0_0()); }
(
{ before(grammarAccess.getActionAccess().getDriveDistanceDriveKeyword_2_0_0()); }

	'drive' 

{ after(grammarAccess.getActionAccess().getDriveDistanceDriveKeyword_2_0_0()); }
)

{ after(grammarAccess.getActionAccess().getDriveDistanceDriveKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__DirectionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDirectionDirectionEnumRuleCall_2_1_0()); }
	ruleDirection{ after(grammarAccess.getActionAccess().getDirectionDirectionEnumRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__DistanceAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDistanceDistanceParserRuleCall_2_2_0()); }
	ruleDistance{ after(grammarAccess.getActionAccess().getDistanceDistanceParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__SteerAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getSteerSteerKeyword_3_0_0()); }
(
{ before(grammarAccess.getActionAccess().getSteerSteerKeyword_3_0_0()); }

	'steer' 

{ after(grammarAccess.getActionAccess().getSteerSteerKeyword_3_0_0()); }
)

{ after(grammarAccess.getActionAccess().getSteerSteerKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__AngleAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getAngleAngleParserRuleCall_3_1_0()); }
	ruleAngle{ after(grammarAccess.getActionAccess().getAngleAngleParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ProbeLakeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getProbeLakeProbeLakeKeyword_4_0()); }
(
{ before(grammarAccess.getActionAccess().getProbeLakeProbeLakeKeyword_4_0()); }

	'probe lake' 

{ after(grammarAccess.getActionAccess().getProbeLakeProbeLakeKeyword_4_0()); }
)

{ after(grammarAccess.getActionAccess().getProbeLakeProbeLakeKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__BlinkLightsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getBlinkLightsBlinkLightsKeyword_5_0()); }
(
{ before(grammarAccess.getActionAccess().getBlinkLightsBlinkLightsKeyword_5_0()); }

	'blink lights' 

{ after(grammarAccess.getActionAccess().getBlinkLightsBlinkLightsKeyword_5_0()); }
)

{ after(grammarAccess.getActionAccess().getBlinkLightsBlinkLightsKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Distance__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDistanceAccess().getValueINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getDistanceAccess().getValueINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Angle__ValueAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAngleAccess().getValueINTTerminalRuleCall_0_0_0()); }
	RULE_INT{ after(grammarAccess.getAngleAccess().getValueINTTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Angle__AwayAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAngleAccess().getAwayAwayFromObstaclesKeyword_1_0()); }
(
{ before(grammarAccess.getAngleAccess().getAwayAwayFromObstaclesKeyword_1_0()); }

	'away from obstacles' 

{ after(grammarAccess.getAngleAccess().getAwayAwayFromObstaclesKeyword_1_0()); }
)

{ after(grammarAccess.getAngleAccess().getAwayAwayFromObstaclesKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


